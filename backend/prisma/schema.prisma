generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  admin
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(client)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  orders     Order[]
  cart       Cart?
  addresses  Address[]
}

model Address {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  street      String
  city        String
  state       String
  country     String
  postal_code String
  phone       String?

  is_default  Boolean  @default(false)

  orders      Order[]
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  category_id String?
  category    Category?     @relation(fields: [category_id], references: [id])

  sizes       ProductSize[]
  orderItems  OrderItem[]   @relation("ProductToOrderItem")
  cartItems   CartItem[]    @relation("ProductToCartItem")
}

model ProductSize {
  id           String       @id @default(uuid())
  size         String
  stock        Int
  weight       Float
  length       Float?       // cm, opcional
  width        Float?       // cm, opcional
  height       Float?       // cm, opcional

  product_id   String
  product      Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)

  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Cart {
  id         String     @id @default(uuid())
  user_id    String     @unique
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      CartItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model CartItem {
  id              String       @id @default(uuid())
  quantity        Int

  cart_id         String
  cart            Cart         @relation(fields: [cart_id], references: [id], onDelete: Cascade)

  product_size_id String
  productSize     ProductSize  @relation(fields: [product_size_id], references: [id])

  product_id      String
  product         Product      @relation("ProductToCartItem", fields: [product_id], references: [id])
}

model Shipping {
  id                   String   @id @default(uuid())
  name                 String
  base_price           Float
  price_per_kilo       Float
  estimated_days       Int
  external_service_code String?  // c√≥digo del servicio Correo Argentino
  description          String?  // campo opcional
  active               Boolean  @default(true)

  orders Order[]
}

model Order {
  id             String    @id @default(uuid())
  user_id        String
  shipping_id    String
  address_id     String
  total          Float
  shipping_cost  Float?    // costo seleccionado, por ej. aDomicilio
  paqar_sucursal_cost Float?  // costo retiro sucursal
  paqar_domicilio_cost Float? // costo a domicilio
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipping    Shipping @relation(fields: [shipping_id], references: [id])
  address     Address  @relation(fields: [address_id], references: [id], onDelete: Cascade)

  items       OrderItem[]

  payment     Payment? @relation
}

model OrderItem {
  id              String       @id @default(uuid())
  quantity        Int
  price           Float

  order_id        String
  order           Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)

  product_size_id String
  productSize     ProductSize  @relation(fields: [product_size_id], references: [id])

  product_id      String
  product         Product      @relation("ProductToOrderItem", fields: [product_id], references: [id])
}

model Payment {
  id             String    @id @default(uuid())
  
  order_id       String    @unique
  order          Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  payment_method String
  status         String
  amount         Float
  transaction_id String?
  
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}
